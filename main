from ursina import *
import noise
from ursina.prefabs.first_person_controller import FirstPersonController
app = Ursina()
player = FirstPersonController()
Sky()

window.exit_button.visible = False #nie widać x w rogu full screen zabawa

def mysz():
  #klikanie myszą aktywuje funkcje zmiany pozycji ręki
  if held_keys['left mouse'] or held_keys['right mouse']:
    hand.action()
  else:
    hand.rest()

#teren making
def landscape(blok, height, kolor):
   for i in range(20):
      for j in range(20):
         box = Button(color=kolor, model='cube', position=(j, height, i), texture=blok, parent=scene, origin_y=0.5)
         boxes.append(box)
         
#fancy teren making
#x i y to koordynaty (jakby grid) zmiennej i- wprost od postaci zaraz po spawn; a i b to koordynaty zmiennej j w bok od postaci zaraz po spawn; height to warstwa
def fancy_landscape(x,y,a,b,height):
   for i in range(x,y):
      for j in range(a,b):
         box = Button(color=color.green, model='cube', position=(j, height, i), texture='grass_block_top.png', parent=scene, origin_y=0.5)
         boxes.append(box)
######
class Animal(Entity):
    def __init__(self, position, texture):
        super().__init__(
            model='cube',
            scale=(1, 1, 1),
            texture=texture,
            collider='box',
            position=position
        )
        self.speed = random.uniform(0.001, 0.02)
        self.direction = random.choice(['up', 'down', 'left', 'right'])
        self.is_jumping = False
        self.jump_height = 1

    def update(self):
        if self.is_jumping:
            if self.jump_height > 0:
                self.position += (0, self.speed * 2, 0)
                self.jump_height -= self.speed * 2
            else:
                self.is_jumping = False
                self.jump_height = 1

        new_position = self.position
        if self.direction == 'up':
            new_position += (0, 0, self.speed)
        elif self.direction == 'down':
            new_position -= (0, 0, self.speed)
        elif self.direction == 'left':
            new_position -= (self.speed, 0, 0)
        elif self.direction == 'right':
            new_position += (self.speed, 0, 0)

        if not self.is_within_grass_area(new_position) or self.collides_with_boxes(new_position):
            self.change_direction()
            new_position = self.position

        self.position = new_position

    def collides_with_boxes(self, position):
        for box in boxes:
            if self.intersects(box).hit:
                return True
        return False

    def change_direction(self):
        if self.direction == 'up':
            self.direction = 'down'
        elif self.direction == 'down':
            self.direction = 'up'
        elif self.direction == 'left':
            self.direction = 'right'
        elif self.direction == 'right':
            self.direction = 'left'

    def is_within_grass_area(self, position):
        return (
            grass_area[0] <= position.x < grass_area[2]-1
            and grass_area[1] <= position.z < grass_area[3]-1
        )

    def input(self, key):
        if key == 'space' and not self.is_jumping:
            self.is_jumping = True
            
def update():
    for animal in animals:
        animal.update()

    for animal in animals:
        if player.intersects(animal).hit:
            if held_keys['left mouse']:
                animal.position += (0, 1, 0)
                animal.change_direction()

    pig.walk()

#normal_grass_and_stone 
boxes = []
stone='stone.png'
dirt='dirt.png'
grass='grass_block_top.png'
white = color.white
green = color.green
landscape(stone, -6, white)
landscape(stone, -5, white)
landscape(stone, -4, white)
landscape(dirt, -3, white)
landscape(dirt, -2, white)
landscape(dirt, -1, white)
landscape(grass, 0, green)

#fancy_grass
fancy_landscape(13,20,0,20,1)
fancy_landscape(11,13,6,20,1)
fancy_landscape(10,11,9,20,1)
fancy_landscape(8,10,11,20,1)
fancy_landscape(7,8,13,20,1)
fancy_landscape(5,7,18,20,1)
fancy_landscape(4,5,19,20,1)

fancy_landscape(19,20,11,12,2)
fancy_landscape(18,20,12,20,2)
fancy_landscape(16,18,15,17,2)
fancy_landscape(14,18,17,20,2)
fancy_landscape(13,14,18,19,2)
fancy_landscape(12,14,19,20,2)

fancy_landscape(20,20,12,13,3)
fancy_landscape(19,20,13,20,3)
fancy_landscape(18,19,15,16,3)
fancy_landscape(17,20,16,20,3)
fancy_landscape(15,17,18,20,3)
fancy_landscape(14,15,19,20,3)

fancy_landscape(19,20,17,18,4)
fancy_landscape(18,20,18,20,4)

fancy_landscape(-1,22,-1,0,1)
fancy_landscape(-1,0,-1,22,1)

trees=[] 

#generacja drzewek
for i in range(20):
    for j in range(20):
       if i%5==0 and j%5==0:
            height=int(noise.pnoise2(i/20, j/20, octaves=6)*7)
            for k in range(height+1, height+4):
                tree=Entity(model='cube', position=(j,k,i),
                              texture='tree', parent=scene, origin_y=0.5, collider='box')
                trees.append(tree)
                liscie = Entity(model='cube', position=(j, k + 1, i),
                              texture='liscie', parent=scene, origin_y=0.5)
                trees.append(liscie)


def input(key):
  for box in boxes:
    if box.hovered:
      if key == 'right mouse down':
        new = Button(color=color.green, model='cube', position=box.position + mouse.normal,
                    texture='grass_block_top.png', parent=scene, origin_y=0.5)
        boxes.append(new)
      if key == 'left mouse down':
        boxes.remove(box)
        destroy(box)
      
  #jak naciśniesz escape to wyłącza mc 
  if key == 'escape':
    application.quit()


        
#reka 
class Hand(Entity):
  def __init__(self):
    super().__init__(parent=camera.ui,model='cube',scale=(0.16,0.6,0.15),color=color.white,
                     texture='handy',rotation=(40,340,0),position=(0.45,-0.4))
    
  def action(self):
    self.position=(0.35,-0.37)

  def rest(self):
    self.position=(0.45,-0.4)

# klasa na prosiaka
class Piggy(Entity):
  def __init__(self):
    super().__init__()
    self.body=Entity(parent=scene, model='cube',scale=(1.2,0.6,0.8), position=(5,0.7,5), texture='pig_bodx3', collider='box')
    self.head=Entity(parent=self.body, model='cube', scale=(0.45,0.9,0.8), position=(0.6,0.3,0),texture='pig_bodx3')
    Entity(parent=self.head, model='plane', rotation=(-90,-90,0), position=(0.51,0,0),texture='piggy')
    Entity(parent=self.head, model='cube', scale=(0.2,0.4,0.5), position=(0.6,-0.2,0),texture='pig_bodx3')
    Entity(parent=self.head, model='cube', scale=(0.4,0.5,0.15), position=(0,-0.1,0.5),texture='pig_bodx3', rotation=(-20,0,0))
    Entity(parent=self.head, model='cube', scale=(0.4,0.5,0.15), position=(0,-0.1,-0.5),texture='pig_bodx3', rotation=(20,0,0))
    self.leg1=Entity(parent=self.body, model='cube', scale=(0.2,0.55,0.3), position=(0.35,-0.5,0.25),texture='pig_bodx3')
    self.leg2=Entity(parent=self.body,model='cube', scale=(0.2,0.55,0.3), position=(0.35,-0.5,-0.25),texture='pig_bodx3')
    self.leg3=Entity(parent=self.body,model='cube', scale=(0.2,0.55,0.3), position=(-0.35,-0.5,-0.25),texture='pig_bodx3')
    self.leg4=Entity(parent=self.body,model='cube', scale=(0.2,0.55,0.3), position=(-0.35,-0.5,0.25),texture='pig_bodx3')
    
# animacja nóg podczas chodzenia
  def legs_rot_section1(self):
    self.leg1.rotation_z+=time.dt*100
    self.leg3.rotation_z+=time.dt*100
    self.leg2.rotation_z-=time.dt*100
    self.leg4.rotation_z-=time.dt*100
  
# animacja nóg podczas chodzenia
  def legs_rot_section2(self):
    self.leg1.rotation_z-=time.dt*100
    self.leg3.rotation_z-=time.dt*100
    self.leg2.rotation_z+=time.dt*100
    self.leg4.rotation_z+=time.dt*100

# animacja nóg podczas chodzenia
  def legs(self):
    global m
    m+=1
    num_frame=200
    n=m%num_frame
    if n<num_frame//2:
      pig.legs_rot_section1()
    else:
      pig.legs_rot_section2()

# obrót + pójście naprzód
  def rotation_90(self, rotation):
    self.body.rotation_y=rotation
    self.body.position += self.body.right * time.dt * 0.1

# chodzenie oparte na pójsciu przed siebie i obracie
  def walking(self):
    global m
    m+=1
    num_frame=800
    n=m%num_frame
    if n<num_frame//4:
      pig.rotation_90(0)
      pig.legs()
    elif n<(num_frame//4)+200:
      pig.rotation_90(90)
      pig.legs()
    elif n<(num_frame//4)+400:
      pig.rotation_90(180)
      pig.legs()
    else:
      pig.rotation_90(270)
      pig.legs()

# jak się zachować po napotkaniu na przeszkode
  def walk(self):
    hit_info = self.head.intersects()
    if hit_info.hit:
      self.body.x+=.5
      self.body.rotation_y=90
      
    else:
      pig.walking()
   
pig=Piggy()
m=0
hand=Hand()
####animals
animals = []
grass_area = (0, 0, 9, 10)

animal_pig_1 = Animal(position=(5, 1, 7), texture='pngwing.com.png')
animals.append(animal_pig_1)

animal_duck2 = Animal(position=(6, 1, 5), texture='pngduck.com.png')
animals.append(animal_duck2)

animal_wolf_3 = Animal(position=(7, 1, 4), texture='pngwolf.com.png')
animals.append(animal_wolf_3)

app.run()
