from ursina import *
# import random - idk czy to bedzie potrzebne
import noise
from ursina.prefabs.first_person_controller import FirstPersonController
app = Ursina()
player = FirstPersonController()
Sky()

window.exit_button.visible = False #nie widać x w rogu full screen zabawa

def update():
  #klikanie myszą aktywuje funkcje zmiany pozycji ręki
  if held_keys['left mouse'] or held_keys['right mouse']:
    hand.action()
  else:
    hand.rest()

#teren making
def landscape(blok, height, kolor):
   for i in range(20):
      for j in range(20):
         box = Button(color=kolor, model='cube', position=(j, height, i), texture=blok, parent=scene, origin_y=0.5)
         boxes.append(box)
         
#fancy teren making
#x i y to koordynaty (jakby grid) zmiennej i- wprost od postaci zaraz po spawn; a i b to koordynaty zmiennej j w bok od postaci zaraz po spawn; height to warstwa
def fancy_landscape(x,y,a,b,height):
   for i in range(x,y):
      for j in range(a,b):
         box = Button(color=color.green, model='cube', position=(j, height, i), texture='grass_block_top.png', parent=scene, origin_y=0.5)
         boxes.append(box)

#normal_grass_and_stone 
boxes = []
stone='stone.png'
dirt='dirt.png'
grass='grass_block_top.png'
white = color.white
green = color.green
landscape(stone, -6, white)
landscape(stone, -5, white)
landscape(stone, -4, white)
landscape(dirt, -3, white)
landscape(dirt, -2, white)
landscape(dirt, -1, white)
landscape(grass, 0, green)

#fancy_grass
fancy_landscape(13,20,0,20,1)
fancy_landscape(11,13,6,20,1)
fancy_landscape(10,11,9,20,1)
fancy_landscape(8,10,11,20,1)
fancy_landscape(7,8,13,20,1)
fancy_landscape(5,7,18,20,1)
fancy_landscape(4,5,19,20,1)

fancy_landscape(19,20,11,12,2)
fancy_landscape(18,20,12,20,2)
fancy_landscape(16,18,15,17,2)
fancy_landscape(14,18,17,20,2)
fancy_landscape(13,14,18,19,2)
fancy_landscape(12,14,19,20,2)

fancy_landscape(20,20,12,13,3)
fancy_landscape(19,20,13,20,3)
fancy_landscape(18,19,15,16,3)
fancy_landscape(17,20,16,20,3)
fancy_landscape(15,17,18,20,3)
fancy_landscape(14,15,19,20,3)

fancy_landscape(19,20,17,18,4)
fancy_landscape(18,20,18,20,4)


trees=[] 

#generacja drzewek
for i in range(50):
    for j in range(50):
       if i%5==0 and j%5==0:
            height=int(noise.pnoise2(i/20, j/20, octaves=6)*7)
            for k in range(height+1, height+4):
                tree=Entity(model='cube', position=(j,k,i),
                              texture='tree.jpeg', parent=scene, origin_y=0.5)
                trees.append(tree)
                liscie = Entity(model='cube', position=(j, k + 1, i),
                              texture='liscie.png', parent=scene, origin_y=0.5)
                trees.append(liscie)


def input(key):
  for box in boxes:
    if box.hovered:
      if key == 'right mouse down':
        new = Button(color=color.green, model='cube', position=box.position + mouse.normal,
                    texture='grass_block_top.png', parent=scene, origin_y=0.5)
        boxes.append(new)
      if key == 'left mouse down':
        boxes.remove(box)
        destroy(box)
      
  #jak naciśniesz escape to wyłącza mc (pozniej jakies ostrzezenie dodam moze)
  if key == 'escape':
    application.quit()
        
#reka 
class Hand(Entity):
  def __init__(self):
    super().__init__(parent=camera.ui,model='cube',scale=(0.16,0.6,0.15),color=color.white,
                     texture='handy',rotation=(40,340,0),position=(0.45,-0.4))
    
  def action(self):
    self.position=(0.35,-0.37)

  def rest(self):
    self.position=(0.45,-0.4)

hand=Hand()

app.run()
